# This gets a bit dirty to cope with the fact that French has homophones that
# are not homonyms.

French_vowels = ["a","e","i","o","u","à","è","ù","â","ê","î","ô","û","é"]

def French_conjugate(verb, person, number):
	stem = verb[:-2]
	type = verb[-2:]
	
	if type == 'er' and person == '1' and number == 'pl.':
		if stem[-1]=='g':
			stem = stem + 'e'
		if stem[-1]=='c':
			stem = stem[:-1]+'ç'
	
	if type == 'er':
		
		suffix = from_table(person,number,[
		
									[ 'sg.',			'pl.'		],
																
					['1',				'e',			'ons'	],
					['2',				'es',			'ez'		],
					['3',				'e',			'ent'		],
					
					])
					
	if type == 'ir':
		
		suffix = from_table(person,number,[
		
									[	'sg.',			'pl.'			],
																
					['1',				'is',			'issons'	],
					['2',				'is',			'issez'		],
					['3',				'it',			'issent'	],
					
					])
					
	if type == 're':
		
		suffix = from_table(person,number,[
		
								[	'sg.',			'pl.'		],
																
					['1',			's',			'ons'	],
					['2',			's',			'ez'		],
					['3',			'',				'ent'		],
					
					])
	
	result = stem + suffix
	if has(verb, person+number):
		result = what_is(verb,person+number)
		
	return result
	
def French_pronoun(person, number, gender,apostrophe):
	row = person
	if person=='3':
		row=row+' '+gender
	
	pronoun = from_table(row,number,[
	
								[	'sg.',			'pl.'		],
	
					['1',			'je ',			'nous '	],
					['2',			'tu ',			'vous '	],
					['3 m.',		'il ',			'ils '		],
					['3 f.',		'elle ',		'elles '	],
					
					])
					
	if pronoun == 'je ' and apostrophe=='Y':
		pronoun = "j'"
	
	return pronoun
	

def initial_vowel(w):
	if starts_with(w, French_vowels):
		return 'Y'
	else:
		return 'N'
		
def English_pronoun(person, number, gender):
	row = person
	if person=='3':
		row=row+' '+gender
	
	return from_table(row,number,[
	
								[	'sg.',					'pl.'				],
	
					['1',			'I',					'we'				],
					['2',			'you {sg.}',		'you {pl}'		],
					['3 m.',		'he',					'they_{m}'	],
					['3 f.',		'she',				'they_{f}'		],
					
					])

def English_conjugate(verb, person, number):
	if person == '3' and number == 'sg.':
		if verb[-1:] == "y" and not verb[-2] in ["a","e","i","o","u"]:
                   verb = verb[:-1] + "ies"
		elif verb[-1] in ["s","x","z"] or verb[-2:] in ["sh","ch"]:
                  verb = verb + "es"
		else:
                  verb = verb + "s"
	return verb
	
def English_pronoun_and_verb(verb, person, number, gender):
	if ambiguity:
		return English_pronoun('3', 'sg.', gender) + '_' + English_conjugate(verb, '3', 'sg.') + '/' + English_pronoun('3', 'pl.', gender) + '_' + English_conjugate(verb, '3', 'pl.')
	else:
		return English_pronoun(person, number, gender) + ' ' + English_conjugate(verb, person, number)
	
person = random.choice(['1' , '2', '3'])
number = random.choice(['sg.', 'pl.'])
gender = random.choice(['m.', 'f.'])

first_verb = entry.words[French][0]
ambiguity =  	(person == '3' and
						not starts_with(first_verb, French_vowels) and
                       	ends_with(first_verb, 'er') and
						not has(first_verb, '3sg.') and
						not has(first_verb, '3pl.'))

grammar(English, [entry, English_pronoun_and_verb, person, number, gender])
grammar(French, [French_pronoun, person, number, gender,[entry, initial_vowel]],[entry, French_conjugate, person, number])
